%ignore /[ \t\n\r]+/

%ignore "\\," | "\\thinspace" | "\\:" | "\\medspace" | "\\;" | "\\thickspace"
%ignore "\\quad" | "\\qquad"
%ignore "\\!" | "\\negthinspace" | "\\negmedspace" | "\\negthickspace"
%ignore "\\vrule" | "\\vcenter" | "\\vbox" | "\\vskip" | "\\vspace" | "\\hfill"
%ignore "\\*" | "\\-" | "\\." | "\\/" | "\\" | "\\(" | "\\="

%ignore "\\left"
%ignore "\\right"

///////////////////// tokens ///////////////////////

// basic binary operators
ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

// tokens with distinct left and right symbols
L_BRACE: "{"
R_BRACE: "}"
L_BRACE_LITERAL: "\\{"
R_BRACE_LITERAL: "\\}"
L_BRACKET: "["
R_BRACKET: "]"
L_CEIL: "\\lceil"
R_CEIL: "\\rceil"
L_FLOOR: "\\lfloor"
R_FLOOR: "\\rfloor"
L_PAREN: "("
R_PAREN: ")"

// limit, integral, sum, and product symbols
FUNC_LIM:  "\\lim"
LIM_APPROACH_SYM: "\\to" | "\\rightarrow" | "\\Rightarrow" | "\\longrightarrow" | "\\Longrightarrow"
FUNC_INT:  "\\int"
FUNC_SUM:  "\\sum"
FUNC_PROD: "\\prod"

// common functions
FUNC_EXP:  "\\exp"
FUNC_LOG:  "\\log"
FUNC_LN:   "\\ln"

// trigonometric functions
FUNC_SIN:  "\\sin"
FUNC_COS:  "\\cos"
FUNC_TAN:  "\\tan"
FUNC_CSC:  "\\csc"
FUNC_SEC:  "\\sec"
FUNC_COT:  "\\cot"

// inverse trigonometric functions
FUNC_ARCSIN: "\\arcsin"
FUNC_ARCCOS: "\\arccos"
FUNC_ARCTAN: "\\arctan"
FUNC_ARCCSC: "\\arccsc"
FUNC_ARCSEC: "\\arcsec"
FUNC_ARCCOT: "\\arccot"

// hyperbolic trigonometric functions
FUNC_SINH: "\\sinh"
FUNC_COSH: "\\cosh"
FUNC_TANH: "\\tanh"
FUNC_ARSINH: "\\arsinh"
FUNC_ARCOSH: "\\arcosh"
FUNC_ARTANH: "\\artanh"

FUNC_SQRT: "\\sqrt"

// miscellaneous symbols
CMD_TIMES: "\\times"
CMD_CDOT:  "\\cdot"
CMD_DIV:   "\\div"
CMD_FRAC:  "\\frac" | "\\dfrac" | "\\tfrac"
CMD_BINOM: "\\binom" | "\\dbinom" | "\\tbinom"
CMD_DBINOM: "\\dbinom"
CMD_TBINOM: "\\tbinom"

BANG: "!"
BAR: "|"
CARET: "^"
COLON: ":"
UNDERSCORE: "_"

// relational symbols
EQUAL: "="
NOT_EQUAL: "\\neq" | "\\ne"
LT: "<"
LTE: "\\leq" | "\\le"
GT: ">"
GTE: "\\geq" | "\\ge"

DIVISION: CMD_DIV | DIV
MULTIPLICATION: MUL | CMD_TIMES | CMD_CDOT

// DIFFERENTIAL: /d[ \t\r\n]*?([a-zA-Z]|\\[a-zA-Z]+)/
// SYMBOL.0: /([A-Za-z]|\\[a-zA-Z]+)/
// SUBSCRIPT_SYMBOL: /([A-Za-z]|\\[a-zA-Z]+)_(([A-Za-z0-9]|\\[a-zA-Z]+)|\{([A-Za-z0-9]|\\[a-zA-Z]+)\})/
SYMBOL.1: /[a-zA-Z]+/
SUBSCRIPTED_SYMBOL: /([a-zA-Z]+)_(([A-Za-z0-9]|[a-zA-Z]+)|\{([A-Za-z0-9]|[a-zA-Z]+)\})/

%import common.INT -> INT
%import common.DECIMAL -> FLOAT

//////////////////// grammar //////////////////////

string: relation | expression

atom: SYMBOL | SUBSCRIPTED_SYMBOL | INT | FLOAT

group: L_PAREN expression R_PAREN
      | L_BRACKET expression R_BRACKET
      | L_BRACE expression R_BRACE
      | L_BRACE_LITERAL expression R_BRACE_LITERAL

abs_group: L_BAR expression R_BAR
floor_group: L_FLOOR expression R_FLOOR
ceil_group: L_CEIL expression R_CEIL

relation: atom (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) atom

expression: atom (ADD | SUB | MULTIPLICATION | DIVISION) atom

fraction: CMD_FRAC L_BRACE group R_BRACE L_BRACE group R_BRACE

binomial: CMD_BINOM L_BRACE group R_BRACE L_BRACE group R_BRACE

//sqrt: FUNC_SQRT (L_BRACKET expr R_BRACKET)? L_BRACE expr R_BRACE

//summation: FUNC_SUM sub_equation sup_expression expr
//         | FUNC_SUM sup_expression sub_equation expr

//product: FUNC_PROD sub_equation sup_expression expr
//       | FUNC_PROD sup_expression sub_equation expr

//limit: FUNC_LIM sub_limit expr
