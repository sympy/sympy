%ignore /[ \t\n\r]+/

%ignore "\\," | "\\thinspace" | "\\:" | "\\medspace" | "\\;" | "\\thickspace"
%ignore "\\quad" | "\\qquad"
%ignore "\\!" | "\\negthinspace" | "\\negmedspace" | "\\negthickspace"
%ignore "\\vrule" | "\\vcenter" | "\\vbox" | "\\vskip" | "\\vspace" | "\\hfill"
%ignore "\\*" | "\\-" | "\\." | "\\/" | "\\" | "\\(" | "\\="

%ignore "\\left"
%ignore "\\right"

///////////////////// tokens ///////////////////////

// basic binary operators
ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

// tokens with distinct left and right symbols
L_BRACE: "{"
R_BRACE: "}"
L_BRACE_LITERAL: "\\{"
R_BRACE_LITERAL: "\\}"
L_BRACKET: "["
R_BRACKET: "]"
L_CEIL: "\\lceil"
R_CEIL: "\\rceil"
L_FLOOR: "\\lfloor"
R_FLOOR: "\\rfloor"
L_PAREN: "("
R_PAREN: ")"

// limit, integral, sum, and product symbols
FUNC_LIM:  "\\lim"
LIM_APPROACH_SYM: "\\to" | "\\rightarrow" | "\\Rightarrow" | "\\longrightarrow" | "\\Longrightarrow"
FUNC_INT:  "\\int"
FUNC_SUM:  "\\sum"
FUNC_PROD: "\\prod"

// common functions
FUNC_EXP:  "\\exp"
FUNC_LOG:  "\\log"
FUNC_LN:   "\\ln"

// trigonometric functions
FUNC_SIN:  "\\sin"
FUNC_COS:  "\\cos"
FUNC_TAN:  "\\tan"
FUNC_CSC:  "\\csc"
FUNC_SEC:  "\\sec"
FUNC_COT:  "\\cot"

// inverse trigonometric functions
FUNC_ARCSIN: "\\arcsin" | "\\sin^{-1}"
FUNC_ARCCOS: "\\arccos" | "\\cos^{-1}"
FUNC_ARCTAN: "\\arctan" | "\\tan^{-1}"
FUNC_ARCCSC: "\\arccsc" | "\\csc^{-1}"
FUNC_ARCSEC: "\\arcsec" | "\\sec^{-1}"
FUNC_ARCCOT: "\\arccot" | "\\cot^{-1}"

// hyperbolic trigonometric functions
FUNC_SINH: "\\sinh"
FUNC_COSH: "\\cosh"
FUNC_TANH: "\\tanh"
FUNC_ARSINH: "\\arsinh"
FUNC_ARCOSH: "\\arcosh"
FUNC_ARTANH: "\\artanh"

FUNC_SQRT: "\\sqrt"

// miscellaneous symbols
CMD_TIMES: "\\times"
CMD_CDOT:  "\\cdot"
CMD_DIV:   "\\div"
CMD_FRAC:  "\\frac" | "\\dfrac" | "\\tfrac"
CMD_BINOM: "\\binom" | "\\dbinom" | "\\tbinom"

CMD_MATHIT: "\\mathit"

CMD_INFTY: "\\infty"

BANG: "!"
BAR: "|"
CARET: "^"
COLON: ":"
UNDERSCORE: "_"

// relational symbols
EQUAL: "="
NOT_EQUAL: "\\neq" | "\\ne"
LT: "<"
LTE: "\\leq" | "\\le"
GT: ">"
GTE: "\\geq" | "\\ge"

DIV_SYMBOL: CMD_DIV | DIV
MUL_SYMBOL: MUL | CMD_TIMES | CMD_CDOT

// DIFFERENTIAL: /d[ \t\r\n]*?([a-zA-Z]|\\[a-zA-Z]+)/
// SYMBOL.0: /([A-Za-z]|\\[a-zA-Z]+)/
// SUBSCRIPT_SYMBOL: /([A-Za-z]|\\[a-zA-Z]+)_(([A-Za-z0-9]|\\[a-zA-Z]+)|\{([A-Za-z0-9]|\\[a-zA-Z]+)\})/
SYMBOL.1: /[a-zA-Z]/
SUBSCRIPTED_SYMBOL: /([a-zA-Z])_(([A-Za-z0-9]|[a-zA-Z]+)|\{([A-Za-z0-9]|[a-zA-Z]+)\})/

WORD: /[a-zA-Z]+/

%import common.INT -> UNSIGNED_INT
%import common.DIGIT -> DIGIT
%import common.SIGNED_INT -> SIGNED_INT
%import common.SIGNED_FLOAT -> SIGNED_FLOAT
%import common.DECIMAL -> UNSIGNED_FLOAT

INT: SIGNED_INT | UNSIGNED_INT
FLOAT: SIGNED_FLOAT | UNSIGNED_FLOAT

//////////////////// grammar //////////////////////

latex_string: relation | expression

oneletter_symbol: SYMBOL | SUBSCRIPTED_SYMBOL
multiletter_symbol: CMD_MATHIT L_BRACE WORD R_BRACE
number: INT | FLOAT
infinity: CMD_INFTY

atomic_expr: oneletter_symbol
    | multiletter_symbol
    | number
    | infinity

atom: atomic_expr

group: L_PAREN expression R_PAREN
    | L_BRACKET expression R_BRACKET
    | L_BRACE expression R_BRACE
    | L_BRACE_LITERAL expression R_BRACE_LITERAL

group_round_parentheses: L_PAREN expression R_PAREN
group_curly_parentheses: L_BRACE expression R_BRACE

relation: expression_core (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) expression_core

expression_core: atom
  | group_round_parentheses
  | group_curly_parentheses

add: expression ADD expression
sub: expression SUB expression
mul: expression MUL_SYMBOL expression
    | (oneletter_symbol oneletter_symbol | number oneletter_symbol)
div: expression DIV_SYMBOL expression

group_paren: L_PAREN expression R_PAREN

expression: expression_core
    | add
    | sub
    | mul
    | div
    | fraction
    | binomial
    | function
    | ambiguous_sub

ambiguous_sub: oneletter_symbol number

fraction: basic_fraction
    | simple_fraction
    | general_fraction

general_fraction.0: CMD_FRAC group_curly_parentheses group_curly_parentheses expression?

simple_fraction.1: CMD_FRAC DIGIT group_curly_parentheses expression?
    | CMD_FRAC group_curly_parentheses DIGIT expression?

basic_fraction.2: CMD_FRAC DIGIT DIGIT expression?

function: abs | floor | ceil
    | trigonometric_function

trigonometric_function: sin //| cos | tan | csc | sec | tan

abs: BAR expression BAR
floor: L_FLOOR expression R_FLOOR
ceil: L_CEIL expression R_CEIL

sin: FUNC_SIN expression

binomial: basic_binomial
    | simple_binomial
    | general_binomial

general_binomial.0: CMD_BINOM group_curly_parentheses group_curly_parentheses expression?

simple_binomial.1: CMD_BINOM DIGIT group_curly_parentheses expression?
    | CMD_FRAC group_curly_parentheses DIGIT expression?

basic_binomial.2: CMD_BINOM DIGIT DIGIT expression?

//sqrt: FUNC_SQRT (L_BRACKET expr R_BRACKET)? L_BRACE expr R_BRACE

//summation: FUNC_SUM sub_equation sup_expression expr
//         | FUNC_SUM sup_expression sub_equation expr

//product: FUNC_PROD sub_equation sup_expression expr
//       | FUNC_PROD sup_expression sub_equation expr

//limit: FUNC_LIM sub_limit expr


//expression = ... | application | ...

//application = ... | function | ...

//function = ... | trigonometric_function | ...

//trigonometric_function = ... | sin | ...

//sin: "\\sin" expression

//expression_core: symbol
//  | number
//  | group_round_parentheses
//  | group_curly_parenthese

//expression: expression_core
//  | add | mul | sub | div
