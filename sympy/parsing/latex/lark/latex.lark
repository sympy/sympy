%ignore /[ \t\n\r]+/

%ignore "\\," | "\\thinspace" | "\\:" | "\\medspace" | "\\;" | "\\thickspace"
%ignore "\\quad" | "\\qquad"
%ignore "\\!" | "\\negthinspace" | "\\negmedspace" | "\\negthickspace"
%ignore "\\vrule" | "\\vcenter" | "\\vbox" | "\\vskip" | "\\vspace" | "\\hfill"
%ignore "\\*" | "\\-" | "\\." | "\\/" | "\\\\" | "\\(" | "\\="

%ignore "\\left" | "\\right"
%ignore "\\limits" | "\\nolimits"
%ignore "\\displaystyle"

///////////////////// tokens ///////////////////////

// basic binary operators
ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

// tokens with distinct left and right symbols
L_BRACE: "{"
R_BRACE: "}"
L_BRACE_LITERAL: "\\{"
R_BRACE_LITERAL: "\\}"
L_BRACKET: "["
R_BRACKET: "]"
L_CEIL: "\\lceil"
R_CEIL: "\\rceil"
L_FLOOR: "\\lfloor"
R_FLOOR: "\\rfloor"
L_PAREN: "("
R_PAREN: ")"

// limit, integral, sum, and product symbols
FUNC_LIM:  "\\lim"
LIM_APPROACH_SYM: "\\to" | "\\rightarrow" | "\\Rightarrow" | "\\longrightarrow" | "\\Longrightarrow"
FUNC_INT:  "\\int"
FUNC_SUM:  "\\sum"
FUNC_PROD: "\\prod"

// common functions
FUNC_EXP:  "\\exp"
FUNC_LOG:  "\\log"
FUNC_LN:   "\\ln"
FUNC_LG:   "\\lg"

// trigonometric functions
FUNC_SIN:  "\\sin"
FUNC_COS:  "\\cos"
FUNC_TAN:  "\\tan"
FUNC_CSC:  "\\csc"
FUNC_SEC:  "\\sec"
FUNC_COT:  "\\cot"

// inverse trigonometric functions
FUNC_ARCSIN: "\\arcsin"
FUNC_ARCCOS: "\\arccos"
FUNC_ARCTAN: "\\arctan"
FUNC_ARCCSC: "\\arccsc"
FUNC_ARCSEC: "\\arcsec"
FUNC_ARCCOT: "\\arccot"

// hyperbolic trigonometric functions
FUNC_SINH: "\\sinh"
FUNC_COSH: "\\cosh"
FUNC_TANH: "\\tanh"
FUNC_ARSINH: "\\arsinh"
FUNC_ARCOSH: "\\arcosh"
FUNC_ARTANH: "\\artanh"

FUNC_SQRT: "\\sqrt"

// miscellaneous symbols
CMD_TIMES: "\\times"
CMD_CDOT:  "\\cdot"
CMD_DIV:   "\\div"
CMD_FRAC:  "\\frac" | "\\dfrac" | "\\tfrac"
CMD_BINOM: "\\binom" | "\\dbinom" | "\\tbinom"
CMD_OVERLINE: "\\overline"

CMD_MATHIT: "\\mathit"

CMD_INFTY: "\\infty"

BANG: "!"
BAR: "|"
CARET: "^"
COLON: ":"
UNDERSCORE: "_"

// relational symbols
EQUAL: "="
NOT_EQUAL: "\\neq" | "\\ne"
LT: "<"
LTE: "\\leq" | "\\le"
GT: ">"
GTE: "\\geq" | "\\ge"

DIV_SYMBOL: CMD_DIV | DIV
MUL_SYMBOL: MUL | CMD_TIMES | CMD_CDOT

// Greek symbols
// TODO: Shouold we include the uppercase variants for the symbols where the uppercase variant doesn't have a separate meaning?
ALPHA: "\\alpha"
BETA: "\\beta"
GAMMA: "\\gamma"
DELTA: "\\delta" // TODO: Should this be included? Delta usually denotes other things.
EPSILON: "\\epsilon" |  "\\varepsilon"
ZETA: "\\zeta"
ETA: "\\eta"
THETA: "\\theta" | "\\vartheta"
// TODO: Should I add iota to the list?
KAPPA: "\\kappa"
LAMBDA: "\\lambda" // TODO: What about the uppercase variant?
MU: "\\mu"
NU: "\\nu"
XI: "\\xi"
// TODO: Should there be a separate note for transforming \pi into sympy.pi?
RHO: "\\rho" | "\\varrho"
// TODO: What should we do about sigma?
TAU: "\\tau"
UPSILON: "\\upsilon"
PHI: "\\phi" | "\\varphi"
CHI: "\\chi"
PSI: "\\psi"
OMEGA: "\\omega"

GREEK_SYMBOL: ALPHA | BETA | GAMMA | DELTA | EPSILON | ZETA | ETA | THETA | KAPPA
    | LAMBDA | MU | NU | XI | RHO | TAU | UPSILON | PHI | CHI | PSI | OMEGA

// DIFFERENTIAL: /d[ \t\r\n]*?([a-zA-Z]|\\[a-zA-Z]+)/
SYMBOL: /[a-zA-Z]/
BASIC_SUBSCRIPTED_SYMBOL: /([a-zA-Z])_(([A-Za-z0-9]|[a-zA-Z]+)|\{([A-Za-z0-9]|[a-zA-Z]+)\})/
SYMBOL_WITH_GREEK_SUBSCRIPT: /([a-zA-Z])_/ GREEK_SYMBOL | /([a-zA-Z])_/ L_BRACE GREEK_SYMBOL R_BRACE
// best to define the variant with braces like that instead of shoving it all into one case like in
// /([a-zA-Z])_/ L_BRACE? GREEK_SYMBOL R_BRACE? because then we can easily error out on input like
// r"h_{\theta"
GREEK_SUBSCRIPTED_SYMBOL: GREEK_SYMBOL /_(([A-Za-z0-9]|[a-zA-Z]+)|\{([A-Za-z0-9]|[a-zA-Z]+)\})/

SUBSCRIPTED_SYMBOL: BASIC_SUBSCRIPTED_SYMBOL | SYMBOL_WITH_GREEK_SUBSCRIPT | GREEK_SUBSCRIPTED_SYMBOL

WORD: /[a-zA-Z]+/

%import common.INT -> UNSIGNED_INT
%import common.DIGIT -> DIGIT
%import common.SIGNED_INT -> SIGNED_INT
%import common.SIGNED_FLOAT -> SIGNED_FLOAT
%import common.DECIMAL -> UNSIGNED_FLOAT

INT: SIGNED_INT | UNSIGNED_INT
FLOAT: SIGNED_FLOAT | UNSIGNED_FLOAT

//////////////////// grammar //////////////////////

latex_string: relation | expression

oneletter_symbol: SYMBOL | SUBSCRIPTED_SYMBOL | GREEK_SYMBOL
multiletter_symbol: CMD_MATHIT L_BRACE WORD R_BRACE
number: /\.?\d/
infinity: CMD_INFTY

atomic_expr: oneletter_symbol
    | multiletter_symbol
    | number
    | infinity

atom: atomic_expr

group_round_parentheses: L_PAREN expression R_PAREN
group_square_brackets: L_BRACKET expression R_BRACKET
group_curly_parentheses: L_BRACE expression R_BRACE

relation: expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) expression

expression_core: atom | group_curly_parentheses

add: expression ADD expression_mul
sub: expression? SUB expression_mul
mul: expression_mul MUL_SYMBOL expression_power
    | implicit_multiplication
div: expression_mul DIV_SYMBOL expression_power

implicit_multiplication: (oneletter_symbol | number) expression_mul
    | group_round_parentheses (group_round_parentheses | oneletter_symbol)
    | function function
    | fraction expression


// multidigit_number: /\d{2,}/ | /\d+\./ | /\d+\.\d+/ | /\.\d+/

expression_func: expression_core
    | group_round_parentheses
    | fraction
    | binomial
    | function
    | ambiguous_sub
    | integral
    | summation
    | product

expression_power: expression_func | superscript

expression_mul: expression_power | mul | div

expression: expression_mul | add | sub | limit

list_of_expressions: expression | comma_operator

comma_operator: list_of_expressions "," expression

limit_dir: "+" | "-" | L_BRACE ("+" | "-") R_BRACE

limit: FUNC_LIM (UNDERSCORE L_BRACE expression LIM_APPROACH_SYM expression (CARET limit_dir)? R_BRACE)? expression

//group_curly_parentheses_lim: L_BRACE atomic_expr LIM_APPROACH_SYM  R_BRACE

// unary_neg: SUB expression

integral: FUNC_INT expression "d"oneletter_symbol
    | FUNC_INT (UNDERSCORE expression_core CARET expression_core)? expression? "d"oneletter_symbol
    | FUNC_INT (CARET expression_core UNDERSCORE expression_core)? expression? "d"oneletter_symbol

group_curly_parentheses_special: L_BRACE (relation | atomic_expr) R_BRACE

summation: FUNC_SUM UNDERSCORE group_curly_parentheses_special CARET expression_core expression
    | FUNC_SUM CARET expression_core UNDERSCORE group_curly_parentheses_special expression

product: FUNC_PROD UNDERSCORE group_curly_parentheses_special CARET expression_core expression
    | FUNC_PROD CARET expression_core UNDERSCORE group_curly_parentheses_special expression

superscript: expression_func CARET expression_power

//subscript.1: expression_core UNDERSCORE expression

ambiguous_sub: oneletter_symbol number

fraction: CMD_FRAC expression_core expression_core
// basic_fraction
//     | simple_fraction
//    | general_fraction

general_fraction.0: CMD_FRAC group_curly_parentheses group_curly_parentheses expression?

simple_fraction.1: CMD_FRAC DIGIT group_curly_parentheses expression?
    | CMD_FRAC group_curly_parentheses DIGIT expression?

basic_fraction.2: CMD_FRAC DIGIT DIGIT expression?

function_applied: oneletter_symbol L_PAREN list_of_expressions R_PAREN

function: function_applied
    | abs | floor | ceil
    | trigonometric_function | inverse_trigonometric_function
    | hyperbolic_trigonometric_function | inverse_hyperbolic_trigonometric_function
    | exponential
    | log
    | square_root
    | factorial
    | conjugate

exponential: FUNC_EXP expression

log: FUNC_LOG expression
    | FUNC_LN expression
    | FUNC_LG expression
    | FUNC_LOG UNDERSCORE (DIGIT | oneletter_symbol) expression
    | FUNC_LOG UNDERSCORE group_curly_parentheses expression

square_root: FUNC_SQRT group_curly_parentheses
    | FUNC_SQRT group_square_brackets group_curly_parentheses

factorial: expression BANG

conjugate: CMD_OVERLINE group_curly_parentheses
    | CMD_OVERLINE DIGIT

trigonometric_function: sin | cos | tan | csc | sec | cot

sin: FUNC_SIN expression
cos: FUNC_COS expression
tan: FUNC_TAN expression
csc: FUNC_CSC expression
sec: FUNC_SEC expression
cot: FUNC_COT expression

hyperbolic_trigonometric_function: sinh | cosh | tanh

sinh: FUNC_SINH expression
cosh: FUNC_COSH expression
tanh: FUNC_TANH expression

inverse_trigonometric_function: arcsin | arccos | arctan | arccsc | arcsec | arccot

arcsin: FUNC_ARCSIN expression
arccos: FUNC_ARCCOS expression
arctan: FUNC_ARCTAN expression
arccsc: FUNC_ARCCSC expression
arcsec: FUNC_ARCSEC expression
arccot: FUNC_ARCCOT expression

inverse_hyperbolic_trigonometric_function: asinh | acosh | atanh

asinh: FUNC_ARSINH expression
acosh: FUNC_ARCOSH expression
atanh: FUNC_ARTANH expression

abs: BAR expression BAR
floor: L_FLOOR expression R_FLOOR
ceil: L_CEIL expression R_CEIL

binomial: basic_binomial
    | simple_binomial
    | general_binomial

general_binomial.0: CMD_BINOM group_curly_parentheses group_curly_parentheses expression?

simple_binomial.1: CMD_BINOM DIGIT group_curly_parentheses expression?
    | CMD_FRAC group_curly_parentheses DIGIT expression?

basic_binomial.2: CMD_BINOM DIGIT DIGIT expression?
