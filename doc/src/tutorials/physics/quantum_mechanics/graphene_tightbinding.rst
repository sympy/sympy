.. -*- coding: utf-8 -*-
.. _graphene_tightbinding:

==========================================
Graphene Band Structure with Tight Binding
==========================================

All definitions start from **SymPy variables**: the structure factor :math:`f(\mathbf{k})`
is symbolic; plots are generated by evaluating SymPy expressions via :func:'sympy.lambdify'.

Symbolic :math:`\lvert x\rvert` and parameters
==============================================

.. code-block:: python

   from sympy import symbols, Matrix, I, exp, Abs, sqrt, pi

   kx, ky, a, t = symbols('kx ky a t', positive=True)
   d1 = Matrix([0, a])
   d2 = Matrix([sqrt(3)*a/2, -a/2])
   d3 = Matrix([-sqrt(3)*a/2, -a/2])

   f = exp(I*(kx*d1[0] + ky*d1[1])) \
     + exp(I*(kx*d2[0] + ky*d2[1])) \
     + exp(I*(kx*d3[0] + ky*d3[1]))
   fabs = Abs(f)

Band structure (SymPy variables → NumPy)
========================================

.. plot::
   :include-source: True

   import numpy as np
   import matplotlib.pyplot as plt
   from sympy import symbols, Matrix, I, exp, Abs, sqrt, pi, lambdify

   kx, ky, a, t = symbols('kx ky a t', positive=True)
   d1 = Matrix([0, a])
   d2 = Matrix([sqrt(3)*a/2, -a/2])
   d3 = Matrix([-sqrt(3)*a/2, -a/2])
   f = exp(I*(kx*d1[0] + ky*d1[1])) + exp(I*(kx*d2[0] + ky*d2[1])) + exp(I*(kx*d3[0] + ky*d3[1]))
   fabs = Abs(f)
   fabs_np = lambdify((kx, ky, a), fabs, modules=["numpy"])

   # SymPy variables evaluated *here*
   a_val = 1.0
   t_val = 2.7
   G = np.array([0.0, 0.0])
   K = np.array([2*np.pi/(3*np.sqrt(3)*a_val), 2*np.pi/(3*a_val)])
   M = np.array([np.pi/(np.sqrt(3)*a_val), np.pi/(3*a_val)])
   path = [G, K, M, G]
   labels = [r"$\Gamma$", "K", "M", r"$\Gamma$"]

   Nk = 200
   kpts = np.vstack([np.linspace(path[i], path[i+1], Nk) for i in range(len(path)-1)])

   magf = fabs_np(kpts[:,0], kpts[:,1], a_val)
   Eplus = +t_val * magf
   Eminus = -t_val * magf

   plt.figure(figsize=(6,4))
   plt.plot(Eplus)
   plt.plot(Eminus)
   plt.axhline(0.0, linestyle="--", linewidth=1)
   plt.xticks([0, Nk, 2*Nk, 3*Nk], labels)
   plt.ylabel("Energy (eV)")
   plt.title("Graphene Band Structure (driven by SymPy variables a, t)")
   plt.grid(True)
   plt.tight_layout()
   plt.show()

Density of states (SymPy variables → NumPy)
===========================================

.. plot::
   :include-source: True

   import numpy as np
   import matplotlib.pyplot as plt
   from sympy import symbols, Matrix, I, exp, Abs, sqrt, lambdify, pi

   kx, ky, a = symbols('kx ky a', positive=True)
   d1 = Matrix([0, a])
   d2 = Matrix([sqrt(3)*a/2, -a/2])
   d3 = Matrix([-sqrt(3)*a/2, -a/2])
   f = exp(I*(kx*d1[0]+ky*d1[1])) + exp(I*(kx*d2[0]+ky*d2[1])) + exp(I*(kx*d3[0]+ky*d3[1]))
   fabs = Abs(f)
   fabs_np = lambdify((kx, ky, a), fabs, modules=["numpy"])

   a_val = 1.0
   t_val = 2.7
   N = 30000
   kx_s = np.random.uniform(-np.pi/a_val, np.pi/a_val, N)
   ky_s = np.random.uniform(-np.pi/a_val, np.pi/a_val, N)

   magf = fabs_np(kx_s, ky_s, a_val)
   E = np.concatenate([+t_val*magf, -t_val*magf])

   plt.figure(figsize=(6,4))
   plt.hist(E, bins=200, density=True, alpha=0.7)
   plt.xlabel("Energy (eV)")
   plt.ylabel("DOS (a.u.)")
   plt.title("Graphene DOS (driven by SymPy variable a)")
   plt.tight_layout()
   plt.show()
