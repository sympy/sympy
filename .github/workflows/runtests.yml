# ------------------------------------------------------------------ #
#                                                                    #
#           SymPy CI script for Github Actions                       #
#                                                                    #
#   Runs each time a pull request is opened, pushed or merged        #
#                                                                    #
# ------------------------------------------------------------------ #

name: test
on: [push, pull_request]
jobs:

  # -------------------- Code quality ------------------------------ #

  code-quality:

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath flake8

      - name: Basic code quality tests
        run: bin/test quality

      - name: Run flake8 on the sympy package
        run: flake8 sympy

      - name: Detect invalid escapes like '\e'
        run: python -We:invalid -We::SyntaxWarning -m compileall -f -q sympy/

      - name: Test all modules are listed in setup.py
        run: bin/test_setup.py

      # -- temporarily disabled -- #
      # These checks were too difficult for new contributors. They will
      # need to be made easier to work with before they are reenabled.

      #- name: Test for ambiguous author information in commits
      #  run: bin/mailmap_update.py

      #- name: Make sure all commits have an associated author
      #  run: bin/authors_update.py


  # ----------------------------- mypy ----------------------------- #

  mypy:
    needs: code-quality

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath mypy

      - name: Run mypy on the sympy package
        run: mypy sympy

  # ------------------------- sphinx-lint -------------------------- #

  sphinx-lint:
    needs: code-quality

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install sphinx-lint

      - name: Run sphinx-lint on the sympy documentation
        run: sphinx-lint doc/

  # --------------------------- check authors ---------------------- #

  authors:
    needs: code-quality
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          # Clone full git history (needed for detecting authors)
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/mailmap_check.py

  # -------------------- Doctests latest Python -------------------- #

  doctests-latest:
    needs: code-quality

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/doctest --force-colors
      - run: examples/all.py -q

  # -------------------- Test split 1/2 latest Python -------------- #

  tests1-latest:
    needs: code-quality

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/test --force-colors --split=1/2

  # -------------------- Test split 2/2 latest Python -------------- #

  tests2-latest:
    needs: code-quality

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/test --force-colors --split=2/2

  # -------------------- Test Pyodide on node ---------------------- #

  test-pyodide:
    needs: code-quality

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        split: ['1/2', '2/2']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - run: wget -qO- https://github.com/pyodide/pyodide/releases/download/0.20.1a1/pyodide-build-0.20.1a1.tar.bz2 | tar xjf -
      - run: python3 setup.py bdist_wheel
      - run: node bin/test_pyodide.mjs --split=${{ matrix.split }} 2>/dev/null  # ignore node exception

  # -------------------- Optional dependency tests ----------------- #

  optional-dependencies:
    needs: code-quality

    runs-on: ubuntu-20.04
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', 'pypy-3.8']
        experimental: [false]
        # Maybe use this to add 3.12 when the time comes:
        #include:
        #  - python-version: '3.12.0-alpha - 3.12'
        #    experimental: true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Install the non-Python dependencies
      - run: sudo apt install antlr4 libgfortran5 gfortran libmpfr-dev libmpc-dev libopenblas-dev
      - run: python -m pip install --upgrade pip wheel setuptools

      # Use various libs from git for Python 3.11
      - if: ${{ contains(matrix.python-version, '3.11') }}
        run: pip install git+https://github.com/cython/cython@master
      - if: ${{ contains(matrix.python-version, '3.11') }}
        run: pip install git+https://github.com/scipy/scipy@main

      # SciPy 1.9.0 and 1.9.1 fail to compile under PyPy:
      #
      # https://github.com/FFY00/meson-python/issues/121
      - if: ${{ matrix.python-version == 'pypy-3.8' }}
        run: pip install 'scipy<1.9.0'

      # dependencies to install in all Python versions:
      - run: pip install mpmath numpy numexpr matplotlib ipython cython scipy \
                         aesara wurlitzer autowrap                            \
                         'antlr4-python3-runtime==4.11.*'

      # These are not available for pypy
      - if: ${{ matrix.python-version != 'pypy-3.8' }}
        run: pip install gmpy2 jax jaxlib

      # These are not available for pypy and cannot be installed in 3.11 (yet)
      - if: ${{ matrix.python-version != 'pypy-3.8' && ! contains(matrix.python-version, '3.11') }}
        run: pip install symengine llvmlite numba pymc

      # Test external imports
      - run: bin/test_external_imports.py
      - run: bin/test_submodule_imports.py
      - run: bin/test_executable.py

      # Test modules with specific dependencies
      - run: bin/test_optional_dependencies.py

  # -------------------- Tensorflow tests -------------------------- #

  tensorflow:
    needs: code-quality


    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath numpy scipy tensorflow
      # Test modules that can use tensorflow
      - run: bin/test_tensorflow.py

  # -------------------- SymEngine tests --------------------------- #

  symengine:
    needs: code-quality

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath numpy symengine
      # Test modules that can use tensorflow
      - run: bin/test_symengine.py
        env:
          USE_SYMENGINE: '1'

  # -------------------- Slow test split 1/2 ----------------------- #

  slow1:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/test --force-colors --slow --timeout=595 --split=1/2

  # -------------------- Slow test split 2/2 ----------------------- #

  slow2:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/test --force-colors --slow --timeout=595 --split=2/2

  # -------------------- Test split 1/2 older (and newer) Python --------------- #

  tests1:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.11', 'pypy-3.8']
        experimental: [false]
        # Maybe use this to add 3.12 when the time comes:
        #include:
        #  - python-version: '3.12.0-alpha - 3.12'
        #    experimental: true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/test --force-colors --split=1/2

  # -------------------- Test split 2/2 older (and newer) Python --------------- #

  tests2:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.11', 'pypy-3.8']
        experimental: [false]
        # Maybe use this to add 3.12 when the time comes:
        #include:
        #  - python-version: '3.12.0-alpha - 3.12'
        #    experimental: true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/test --force-colors --split=2/2

  # -------------------- Doctests older (and newer) Python --------------------- #

  doctests:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.11', 'pypy-3.8']
        experimental: [false]
        # Maybe use this to add 3.12 when the time comes:
        #include:
        #  - python-version: '3.12.0-alpha - 3.12'
        #    experimental: true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip
      - run: pip install mpmath
      - run: bin/doctest --force-colors
      - run: examples/all.py -q

  # -------------------- Build the html/latex docs ----------------- #

  sphinx:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: doc/aptinstall.sh
      - run: pip install -r doc/requirements.txt
      - run: bin/test_sphinx.sh

      # When run against master, deploy to docs.sympy.org/dev. This requires
      # having an SSH deploy key set up. See
      # https://github.com/marketplace/actions/deploy-to-github-pages#using-an-ssh-deploy-key-
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          folder: doc/_build/html
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          repository-name: sympy/sympy_doc
          target-folder: dev

  # -------------------- Check the error message under py2 --------- #

  py2-import:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '2.7'
      - run: bin/test_py2_import.py

  # -------------------- Check the list of files for sdist --------- #

  sdist-check:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python setup.py sdist
      - run: release/compare_tar_against_git.py dist/*.tar.gz .

  # -------- Run benchmarks against master and previous release ---- #

  benchmarks:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          # Checkout repo with full history
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install asv virtualenv
      - run: git submodule add https://github.com/sympy/sympy_benchmarks.git

        # Need to make sure we can access the branches from the main repo. We
        # will run benchmarks for the PR, for master and for the previous
        # release. The version branch names below should be updated once there
        # has been a newer release of sympy. The list of branches to check is
        # also specified in asv.conf.actions.json which should be updated as
        # well.

      - run: git remote add upstream https://github.com/sympy/sympy.git
      - run: git fetch upstream master
      - run: git fetch upstream 1.11

      - name: Configure benchmarks
        run: asv machine --yes --config asv.conf.actions.json

        # This is the slow part:
      - name: Run benchmarks
        run: asv run --config asv.conf.actions.json

        # Output benchmark results
      - run: asv compare upstream/master HEAD --config asv.conf.actions.json --factor 1.5 | tee pr_vs_master.txt
      - run: asv compare upstream/master HEAD --config asv.conf.actions.json --factor 1.5 --only-changed | tee pr_vs_master_changed.txt
      - run: asv compare upstream/1.11 upstream/master --config asv.conf.actions.json --factor 1.5 | tee master_vs_release.txt
      - run: asv compare upstream/1.11 upstream/master --config asv.conf.actions.json --factor 1.5 --only-changed | tee master_vs_release_changed.txt

        # This workflow does not have write permissions for the repository so
        # we save all outputs as artifacts that can be accessed by the
        # comment-on-pr workflow which is triggered by workflow_run to run when
        # this one completes.

      - name: Upload results as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: benchmarks
          path: |
            pr_vs_master.txt
            pr_vs_master_changed.txt
            master_vs_release.txt
            master_vs_release_changed.txt

  # -------------------- Save PR number ---------------------------- #

  save-pr-number:
    needs: [doctests-latest, tests1-latest, tests2-latest]

    # The comment-on-pr workflow needs the issue number of the PR to be able to
    # comment so we output that to a file and pass it over as an artifact.

    runs-on: ubuntu-20.04
    steps:
      - name: Write PR number to file
        if: ${{ github.event_name == 'pull_request' }}
        run: echo -n ${{ github.event.number }} > pr_number.txt

      - name: Write empty file for PR number
        if: ${{ github.event_name != 'pull_request' }}
        run: echo -n > pr_number.txt

      - name: Upload results as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pr_number
          path: pr_number.txt
